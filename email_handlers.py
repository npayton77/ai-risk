#!/usr/bin/env python3
"""
Email Handlers for AI Risk Assessment Tool
Contains functions for generating email reports and content
"""

from datetime import datetime
from typing import Any
from risk_assessor import AIRiskAssessor

def generate_complete_email_report(assessment: Any, session_id: str, risk_assessor: AIRiskAssessor) -> str:
    """Generate a complete email report with all assessment details"""
    # Get data sensitivity info if available
    data_sensitivity_info = ""
    if hasattr(assessment, 'data_sensitivity_level') and assessment.data_sensitivity_level:
        ds_score = risk_assessor._get_dimension_score('data_sensitivity', assessment.data_sensitivity_level)
        ds_desc = risk_assessor.get_dimension_description('data_sensitivity', assessment.data_sensitivity_level)
        data_sensitivity_info = f"""
Data Sensitivity: {assessment.data_sensitivity_level.upper()} ({ds_score}/4)
Description: {ds_desc}"""
    
    # Get data sensitivity reasoning if available
    ds_reasoning = ""
    if 'data_sensitivity_reasoning' in assessment.responses:
        ds_reasoning = f"""
Data Sensitivity Reasoning: {assessment.responses.get('data_sensitivity_reasoning', 'Not provided')}"""

    return f"""Hi there,

Please find the AI Risk Assessment Report for "{assessment.workflow_name}" below.

=============================================================
                   AI RISK ASSESSMENT REPORT                
=============================================================

Assessment Details:
• Workflow/System: {assessment.workflow_name}
• Assessed by: {assessment.assessor}
• Date: {assessment.date}
• Report ID: RA-{datetime.now().strftime('%Y%m%d')}-{hash(assessment.workflow_name) % 10000}

=============================================================
                        RISK OVERVIEW                      
=============================================================

RISK LEVEL: {assessment.overall_risk.upper()} RISK
Risk Score: {assessment.risk_score}/20 ({int((assessment.risk_score/20)*100)}%)

Risk Summary:
{risk_assessor._get_email_risk_summary(assessment.overall_risk)}

=============================================================
                    RISK ASSESSMENT DIMENSIONS            
=============================================================

AUTONOMY LEVEL: {assessment.autonomy_level.upper()} ({risk_assessor._get_dimension_score('autonomy', assessment.autonomy_level)}/4)
Description: {risk_assessor.get_dimension_description('autonomy', assessment.autonomy_level)}

HUMAN OVERSIGHT: {assessment.oversight_level.upper()} ({risk_assessor._get_dimension_score('oversight', assessment.oversight_level)}/4)
Description: {risk_assessor.get_dimension_description('oversight', assessment.oversight_level)}

OUTPUT IMPACT: {assessment.impact_level.upper()} ({risk_assessor._get_dimension_score('impact', assessment.impact_level)}/4)
Description: {risk_assessor.get_dimension_description('impact', assessment.impact_level)}

ORCHESTRATION: {assessment.orchestration_type.upper()} ({risk_assessor._get_dimension_score('orchestration', assessment.orchestration_type)}/4)
Description: {risk_assessor.get_dimension_description('orchestration', assessment.orchestration_type)}{data_sensitivity_info}

=============================================================
                     RECOMMENDED ACTIONS                   
=============================================================

{chr(10).join([f"{i+1}. {rec}" for i, rec in enumerate(assessment.recommendations)])}

=============================================================
                    ASSESSMENT REASONING                   
=============================================================

Autonomy Level Reasoning:
{assessment.responses.get('autonomy_reasoning', 'Not provided')}

Oversight Level Reasoning:
{assessment.responses.get('oversight_reasoning', 'Not provided')}

Impact Level Reasoning:
{assessment.responses.get('impact_reasoning', 'Not provided')}

Orchestration Type Reasoning:
{assessment.responses.get('orchestration_reasoning', 'Not provided')}{ds_reasoning}

=============================================================

For the interactive version with charts and visualizations:
View online: http://localhost:9000/report/{session_id}
View Report: http://localhost:9000/report/{session_id}

Best regards,
{assessment.assessor}

---
Generated by AI Risk Assessment Tool
{datetime.now().strftime('%B %d, %Y at %I:%M %p')}
"""

def generate_short_email_report(assessment: Any, session_id: str, risk_assessor: AIRiskAssessor) -> str:
    """Generate a short, email-friendly report for mailto: links"""
    risk_summary = risk_assessor._get_email_risk_summary(assessment.overall_risk)
    
    # Keep it short and sweet for email compatibility
    return f"""Hi there,

AI Risk Assessment Report for "{assessment.workflow_name}"

RISK LEVEL: {assessment.overall_risk.upper()} ({assessment.risk_score}/20 - {int((assessment.risk_score/20)*100)}%)

{risk_summary}

TOP RECOMMENDATIONS:
{chr(10).join([f"{i+1}. {rec[:100]}{'...' if len(rec) > 100 else ''}" for i, rec in enumerate(assessment.recommendations[:3])])}

ASSESSMENT DETAILS:
- Assessed by: {assessment.assessor}
- Date: {assessment.date}
- Report ID: RA-{datetime.now().strftime('%Y%m%d')}-{hash(assessment.workflow_name) % 10000}

View full interactive report: http://localhost:9000/report/{session_id}
View complete report: http://localhost:9000/report/{session_id}
Download HTML for email attachment: http://localhost:9000/download_html/{session_id}

Best regards,
{assessment.assessor}

Generated by AI Risk Assessment Tool
""" 